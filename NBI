{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "f9fa40ff",
      "metadata": {
        "id": "f9fa40ff"
      },
      "source": [
        "# National Bridge Inventory (NBI) data from 1990 to 2022"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "91099394",
      "metadata": {
        "id": "91099394"
      },
      "source": [
        "\n",
        "![image.png](https://drive.google.com/uc?id=1npgroPrhibYRDHq-3dzSx8gsxFJ7J3MA)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "009cddc4",
      "metadata": {
        "id": "009cddc4"
      },
      "source": [
        "## Business Problem:\n",
        "Di negara bagian Georgia, Amerika Serikat terdapat 323.868 jembatan yang memerlukan perhatian dan perawatan. Namun, dengan keterbatasan anggaran yang tersedia, hanya 100.000 jembatan yang dapat direnovasi. Oleh karena itu, penting untuk menentukan jembatan mana saja yang perlu diprioritaskan untuk renovasi berdasarkan karakteristik tertentu.\n",
        "\n",
        "Sebagai seorang data scientist, Anda diberikan tugas untuk menyelesaikan permasalahan ini. Temukan jawaban atas permasalahan tersebut dan dapatkan informasi penunjang atas penyelesaian masalah tersebut.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "34731553",
      "metadata": {
        "id": "34731553"
      },
      "source": [
        "## Dataset\n",
        "Anda mendapatkan dataset dari seorang data engginer <b>(dataset sudah bersih)</b> yang berisi data Inventarisasi Jembatan Nasional (National Bridge Inventory/NBI) dari tahun 1990 hingga 2022 terdiri dari berbagai jembatan di negara bagian Georgia, Amerika Serikat. Setiap baris dari dataset ini mewakili satu jembatan dan mencakup banyak informasi mengenai struktur, kondisi, lokasi, penggunaan, konstruksi, dan kondisi cuaca setempat.\n",
        "\n",
        "Kolom yang terdapat pada dataset ini adalah :\n",
        "\n",
        "- 1 - State Code: Kode negara bagian untuk Georgia.\n",
        "- 1 - State Name: Nama negara bagian, yang dalam dataset ini akan selalu Georgia.\n",
        "- 2022 NBI Structure Number: Pengenal unik yang diperbarui untuk jembatan\n",
        "- 22 - Owner Agency: Badan yang memiliki jembatan tersebut.\n",
        "- 3 - County Code: Kode untuk wilayah di mana jembatan berada.\n",
        "- 3 - County Name: Nama daerah di mana jembatan ini berada.\n",
        "- 27 - Year Built: Tahun jembatan ini dibangun.\n",
        "- 29 - Average Daily Traffic: Lalu lintas harian rata-rata yang dilalui jembatan.\n",
        "- 43A - Main Span Material: Bahan utama yang digunakan dalam bentang jembatan.\n",
        "- 43B - Main Span Design: Desain bentang utama jembatan.\n",
        "- 49 - Structure Length (ft.): Panjang total jembatan dalam satuan kaki.\n",
        "- CAT10 - Bridge Condition: Kondisi keseluruhan jembatan (contohnya :  Good, Fair, Poor).\n",
        "- Bridge Age (yr): Usia jembatan dalam hitungan tahun.\n",
        "- CAT29 - Deck Area (sq. ft.): Luas dek jembatan dalam kaki persegi.\n",
        "- 17 - Longitude (decimal): Garis bujur jembatan.\n",
        "- 16 - Latitude (decimal):  Garis lintang jembatan.\n",
        "- 106 - Year Reconstructed: Tahun terakhir jembatan direkonstruksi.\n",
        "- 96 - Total Project Cost: Total biaya proyek jembatan. Dalam Dollar ($)\n",
        "- Average Relative Humidity: Kelembaban relatif rata-rata di lokasi jembatan.\n",
        "- Average Temperature: Suhu rata-rata di lokasi jembatan.\n",
        "- Maximum Temperature : maksimal temperator pada lokasi jembatan\n",
        "- Minimum Temperature : minimal temperator pada lokasi jembatan\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fc060118",
      "metadata": {
        "id": "fc060118"
      },
      "source": [
        "## Import Library"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Z6MC-5NJYMou",
      "metadata": {
        "id": "Z6MC-5NJYMou"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "from scipy import stats\n",
        "import folium\n",
        "from folium.plugins import HeatMap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "uZVuxob1Z1Ks",
      "metadata": {
        "id": "uZVuxob1Z1Ks"
      },
      "outputs": [],
      "source": [
        "# Silahkan digunakan jika ingin menampilkan seluruh kolom (secara default akan terbatas menampilkan kolom )\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "# rubah path_dataset sesuai dataset yang diberikan\n",
        "path = ('BridgesExport_AllYear_clean.csv')\n",
        "df = pd.read_csv(path)\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "u6IYoa46x24a",
      "metadata": {
        "id": "u6IYoa46x24a"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "4b25f599",
      "metadata": {
        "id": "4b25f599"
      },
      "source": [
        "## EDA (Exploratory Data Analysis)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "UpMv1sxIZ_Vl",
      "metadata": {
        "id": "UpMv1sxIZ_Vl"
      },
      "outputs": [],
      "source": [
        "def remove_outliers(df, columns):\n",
        "    df_clean = df.copy()\n",
        "    for column in columns:\n",
        "        Q1 = df_clean[column].quantile(0.25)\n",
        "        Q3 = df_clean[column].quantile(0.75)\n",
        "        IQR = Q3 - Q1\n",
        "        lower_bound = Q1 - 1.5 * IQR\n",
        "        upper_bound = Q3 + 1.5 * IQR\n",
        "        df_clean = df_clean[(df_clean[column] >= lower_bound) & (df_clean[column] <= upper_bound)]\n",
        "    return df_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "HPlqS0FdaGot",
      "metadata": {
        "id": "HPlqS0FdaGot"
      },
      "outputs": [],
      "source": [
        "numerical_columns = [\n",
        "    'Bridge Age (yr)',\n",
        "    '29 - Average Daily Traffic',\n",
        "    '49 - Structure Length (ft.)',\n",
        "    '96 - Total Project Cost'\n",
        "]\n",
        "\n",
        "df_clean = remove_outliers(df, numerical_columns)\n",
        "\n",
        "plt.figure(figsize=(20, 10))\n",
        "for i, column in enumerate(numerical_columns):\n",
        "    plt.subplot(2, 4, i+1)\n",
        "    sns.boxplot(data=df, y=column)\n",
        "    plt.title(f'Before Outlier Removal\\n{column}')\n",
        "\n",
        "    plt.subplot(2, 4, i+5)\n",
        "    sns.boxplot(data=df_clean, y=column)\n",
        "    plt.title(f'After Outlier Removal\\n{column}')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()  # Tampilkan grafik"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "qTMPzk1MbZuR",
      "metadata": {
        "id": "qTMPzk1MbZuR"
      },
      "outputs": [],
      "source": [
        "def calculate_priority_score(row):\n",
        "    condition_weights = {\n",
        "        'Poor': 1.0,\n",
        "        'Fair': 0.6,\n",
        "        'Good': 0.2,\n",
        "        'Excellent': 0.0\n",
        "    }\n",
        "\n",
        "    age_score = min(row['Bridge Age (yr)'] / 100, 1.0)\n",
        "    traffic_score = min(row['29 - Average Daily Traffic'] / 100000, 1.0)\n",
        "    condition_score = condition_weights.get(row['CAT10 - Bridge Condition'], 0.5)\n",
        "\n",
        "    total_score = (\n",
        "        0.4 * condition_score +\n",
        "        0.3 * age_score +\n",
        "        0.3 * traffic_score\n",
        "    )\n",
        "\n",
        "    return total_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "SFRvGADdd_LM",
      "metadata": {
        "id": "SFRvGADdd_LM"
      },
      "outputs": [],
      "source": [
        "df_clean['priority_score'] = df_clean.apply(calculate_priority_score, axis=1)\n",
        "\n",
        "threshold = df_clean['priority_score'].quantile(0.7)\n",
        "df_clean['needs_renovation'] = df_clean['priority_score'] >= threshold\n",
        "\n",
        "priority_bridges = df_clean[df_clean['needs_renovation']].nlargest(100000, 'priority_score')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "FjSoDf5HeGuY",
      "metadata": {
        "id": "FjSoDf5HeGuY"
      },
      "outputs": [],
      "source": [
        "import folium\n",
        "from folium.plugins import HeatMap, MarkerCluster\n",
        "\n",
        "map_center = [priority_bridges['16 - Latitude (decimal)'].mean(),\n",
        "              priority_bridges['17 - Longitude (decimal)'].mean()]\n",
        "\n",
        "m = folium.Map(location=map_center, zoom_start=6)\n",
        "\n",
        "heat_data = [[row['16 - Latitude (decimal)'], row['17 - Longitude (decimal)']]\n",
        "             for idx, row in priority_bridges.iterrows()]\n",
        "HeatMap(heat_data).add_to(m)\n",
        "\n",
        "marker_cluster = MarkerCluster().add_to(m)\n",
        "\n",
        "for idx, row in priority_bridges.iterrows():\n",
        "    folium.CircleMarker(\n",
        "        location=[row['16 - Latitude (decimal)'], row['17 - Longitude (decimal)']],\n",
        "        radius=5,\n",
        "        color='red',\n",
        "        fill=True,\n",
        "        popup=f\"\"\"\n",
        "        County: {row['3 - County Name']}<br>\n",
        "        Condition: {row['CAT10 - Bridge Condition']}<br>\n",
        "        Age: {row['Bridge Age (yr)']:.0f} years<br>\n",
        "        Daily Traffic: {row['29 - Average Daily Traffic']:,.0f}<br>\n",
        "        Priority Score: {row['priority_score']:.2f}\n",
        "        \"\"\"\n",
        "    ).add_to(marker_cluster)\n",
        "\n",
        "m.save('priority_bridges_map.html')\n",
        "\n",
        "m\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "sRarpogYaLfs",
      "metadata": {
        "id": "sRarpogYaLfs"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "condition_dist = priority_bridges['CAT10 - Bridge Condition'].value_counts()\n",
        "plt.pie(condition_dist, labels=condition_dist.index, autopct='%1.1f%%')\n",
        "plt.title('Distribusi Kondisi 100,000 Jembatan Prioritas')\n",
        "plt.savefig('priority_condition_dist.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "jjXRo6PmfSCP",
      "metadata": {
        "id": "jjXRo6PmfSCP"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(12, 6))\n",
        "sns.histplot(data=priority_bridges, x='priority_score', bins=50)\n",
        "plt.title('Distribusi Priority Score')\n",
        "plt.xlabel('Priority Score')\n",
        "plt.ylabel('Jumlah Jembatan')\n",
        "plt.savefig('priority_score_dist.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "PjZ3huSidymE",
      "metadata": {
        "id": "PjZ3huSidymE"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "county_counts = priority_bridges['3 - County Name'].value_counts().head(20)\n",
        "sns.barplot(x=county_counts.values, y=county_counts.index)\n",
        "plt.title('20 County dengan Jembatan Prioritas Terbanyak')\n",
        "plt.xlabel('Jumlah Jembatan')\n",
        "plt.savefig('top_20_counties.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fICbMLsLwk_r",
      "metadata": {
        "id": "fICbMLsLwk_r"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(12, 6))\n",
        "sns.histplot(data=priority_bridges, x='Bridge Age (yr)', bins=50)\n",
        "plt.axvline(priority_bridges['Bridge Age (yr)'].mean(), color='r', linestyle='--',\n",
        "            label=f'Mean Age: {priority_bridges[\"Bridge Age (yr)\"].mean():.1f} years')\n",
        "plt.title('Distribusi Usia Jembatan Prioritas')\n",
        "plt.xlabel('Usia (tahun)')\n",
        "plt.ylabel('Jumlah Jembatan')\n",
        "plt.legend()\n",
        "plt.savefig('age_distribution.png')\n",
        "plt.show()\n",
        "plt.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dLj34TxHzE1H",
      "metadata": {
        "id": "dLj34TxHzE1H"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "mula2ywBpu4K",
      "metadata": {
        "id": "mula2ywBpu4K"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "features = ['Bridge Age (yr)', '29 - Average Daily Traffic', '49 - Structure Length (ft.)', '96 - Total Project Cost', 'Average Relative Humidity', 'Average Temperature', 'Maximum Temperature', 'Minimum Temperature']\n",
        "target = 'CAT10 - Bridge Condition'\n",
        "\n",
        "\n",
        "le = LabelEncoder()\n",
        "df_clean[target] = le.fit_transform(df_clean[target])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "tBVsjG59pnX7",
      "metadata": {
        "id": "tBVsjG59pnX7"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(df_clean[features], df_clean[target], test_size=0.2, random_state=42)\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "\n",
        "model = RandomForestClassifier(random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "\n",
        "print(classification_report(y_test, y_pred))\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n",
        "\n",
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion Matrix:\")\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "WFJQ7V_6pjX_",
      "metadata": {
        "id": "WFJQ7V_6pjX_"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "\n",
        "# Confusion Matrix Visualization\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Greens',\n",
        "            xticklabels=le.classes_, yticklabels=le.classes_)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "tqNaJMGJ-QXF",
      "metadata": {
        "id": "tqNaJMGJ-QXF"
      },
      "outputs": [],
      "source": [
        "summary_report = f\"\"\"\n",
        "LAPORAN ANALISIS 100,000 JEMBATAN PRIORITAS\n",
        "==========================================\n",
        "\n",
        "1. STATISTIK UMUM\n",
        "-----------------\n",
        "Total Jembatan: {len(priority_bridges):,}\n",
        "Rata-rata Usia: {priority_bridges['Bridge Age (yr)'].mean():.1f} tahun\n",
        "Rata-rata Daily Traffic: {priority_bridges['29 - Average Daily Traffic'].mean():,.0f}\n",
        "Total Estimasi Biaya: ${priority_bridges['96 - Total Project Cost'].sum():,.2f}\n",
        "\n",
        "2. DISTRIBUSI KONDISI\n",
        "--------------------\n",
        "{priority_bridges['CAT10 - Bridge Condition'].value_counts().to_string()}\n",
        "\n",
        "3. TOP 10 COUNTY\n",
        "---------------\n",
        "{priority_bridges['3 - County Name'].value_counts().head(10).to_string()}\n",
        "\n",
        "4. DISTRIBUSI USIA\n",
        "-----------------\n",
        "Minimum: {priority_bridges['Bridge Age (yr)'].min():.0f} tahun\n",
        "Maximum: {priority_bridges['Bridge Age (yr)'].max():.0f} tahun\n",
        "Median: {priority_bridges['Bridge Age (yr)'].median():.0f} tahun\n",
        "\n",
        "5. PRIORITAS TERTINGGI (Top 10 Jembatan)\n",
        "--------------------------------------\n",
        "{priority_bridges[['3 - County Name', 'CAT10 - Bridge Condition',\n",
        "                  'Bridge Age (yr)', '29 - Average Daily Traffic',\n",
        "                  'priority_score']].head(10).to_string()}\n",
        "\"\"\"\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "-GuBuJRw_Gf5",
      "metadata": {
        "id": "-GuBuJRw_Gf5"
      },
      "outputs": [],
      "source": [
        "with open('priority_summary.txt', 'w') as f:\n",
        "    f.write(summary_report)\n",
        "\n",
        "priority_bridges.to_excel('priority_bridges.xlsx', index=False)\n",
        "\n",
        "print(\"Analisis selesai. Files yang dihasilkan:\")\n",
        "print(\"1. outlier_comparison.png - Perbandingan data sebelum dan sesudah outlier removal\")\n",
        "print(\"2. priority_bridges_map.html - Peta interaktif lokasi jembatan prioritas\")\n",
        "print(\"3. priority_condition_dist.png - Pie chart kondisi jembatan\")\n",
        "print(\"4. top_20_counties.png - Bar chart county dengan jembatan terbanyak\")\n",
        "print(\"5. age_distribution.png - Histogram distribusi usia\")\n",
        "print(\"6. priority_analysis.html - Scatter plot interaktif\")\n",
        "print(\"7. priority_summary.txt - Laporan lengkap analisis\")\n",
        "print(\"8. priority_bridges.xlsx - Data lengkap jembatan prioritas\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "Yy4hfxNhwmUz",
      "metadata": {
        "id": "Yy4hfxNhwmUz"
      },
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
